import { useEffect, useState } from "react";
import { fetchCategories, API_BASE } from "../api/api";
import { buildCategoryTree } from "../utils/buildTree";
import type { CategoryNode } from "../utils/buildTree";

type ItemProps = {
  node: CategoryNode;
  depth?: number;
};

// –Ø–∫–∏–π —Ä–æ–∑–º—ñ—Ä —ñ–∫–æ–Ω–∫–∏ –ø—Ä–æ—Å–∏–º–æ –¥–ª—è —Å–∞–π–¥–±–∞—Ä—É:
const ICON_SIZE_PREFIX = "100_";

// –ü–æ–±—É–¥–æ–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ URL —ñ–∫–æ–Ω–∫–∏, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏:
// - –ø–æ–≤–Ω–∏–π URL (http...) ‚Äî –±–µ—Ä–µ–º–æ —è–∫ —î
// - –ª–∏—à–µ —ñ–º'—è —Ñ–∞–π–ª—É ‚Äî –ø—Ä–æ–±—É—î–º–æ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º (100_) —ñ –±–µ–∑
// - —à–ª—è—Ö —ñ–∑ /Images/... ‚Äî –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ
const buildIconCandidates = (image?: string | null): string[] => {
  if (!image) return [];
  if (image.startsWith("http")) return [image];

  // –í–∏—Ç—è–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É (–±–µ–∑ –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö –ø—ñ–¥–ø–∞–ø–æ–∫)
  const justName = image.split("/").pop()!.replace(/^\/+/, "");

  // –Ø–∫—â–æ –≤–∂–µ —î –ø—Ä–µ—Ñ—ñ–∫—Å —Ä–æ–∑–º—ñ—Ä—É —É –Ω–∞–∑–≤—ñ ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ —ñ –π–æ–≥–æ, —ñ –≤–∞—Ä—ñ–∞–Ω—Ç –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å–∞
  if (/^\d+_/.test(justName)) {
    return [
      `${API_BASE}/Images/${justName}`,
      `${API_BASE}/Images/${justName.replace(/^\d+_/, "")}`,
    ];
  }

  // –ó–≤–∏—á–∞–π–Ω–∏–π –∫–µ–π—Å: —Å–ø–æ—á–∞—Ç–∫—É 100_<name>, –ø–æ—Ç—ñ–º <name>
  return [
    `${API_BASE}/Images/${ICON_SIZE_PREFIX}${justName}`,
    `${API_BASE}/Images/${justName}`,
  ];
};

function TreeItem({ node, depth = 0 }: ItemProps) {
  const [open, setOpen] = useState(false);
  const hasChildren = node.children.length > 0;

  // –ö–∞–Ω–¥–∏–¥–∞—Ç–∏ –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —ñ–∫–æ–Ω–∫–∏ + —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ
  const candidates = buildIconCandidates(node.image);
  const [srcIdx, setSrcIdx] = useState(0);
  const currentSrc = candidates[srcIdx] ?? null;

  return (
    <li style={{ marginLeft: depth * 8 }}>
      <div
        onClick={() => hasChildren && setOpen(!open)}
        style={{
          cursor: hasChildren ? "pointer" : "default",
          display: "flex",
          alignItems: "center",
          gap: 8,
          padding: "4px 6px",
          borderRadius: 8,
          userSelect: "none",
          transition: "background .2s",
        }}
        onMouseEnter={(e) => (e.currentTarget.style.background = "#f3f4f6")}
        onMouseLeave={(e) => (e.currentTarget.style.background = "transparent")}
        title={node.name}
      >
        {hasChildren ? (open ? "‚ñæ" : "‚ñ∏") : "‚Ä¢"}

        {/* –Ü–∫–æ–Ω–∫–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º fallback */}
        {currentSrc ? (
          <img
            src={currentSrc}
            alt=""
            width={18}
            height={18}
            loading="lazy"
            style={{ display: "inline-block", objectFit: "contain", borderRadius: 4 }}
            onError={() => setSrcIdx((i) => i + 1)} // —è–∫—â–æ 404 ‚Äî –±–µ—Ä–µ–º–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
          />
        ) : (
          <span aria-hidden="true" style={{ width: 18, textAlign: "center", display: "inline-block" }}>
            üóÇÔ∏è
          </span>
        )}

        <span>{node.name}</span>
      </div>

      {hasChildren && open && (
        <ul style={{ listStyle: "none", paddingLeft: 0, marginTop: 4 }}>
          {node.children.map((child) => (
            <TreeItem key={child.id} node={child} depth={depth + 1} />
          ))}
        </ul>
      )}
    </li>
  );
}

export default function CategoryTree() {
  const [data, setData] = useState<CategoryNode[] | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchCategories()
      .then((flat) => setData(buildCategoryTree(flat)))
      .catch((e) => setError(String(e)))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <div className="muted">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π‚Ä¶</div>;
  if (error) return <div className="error">–ü–æ–º–∏–ª–∫–∞: {error}</div>;
  if (!data || data.length === 0) return <div className="muted">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ</div>;

  return (
    <nav className="sidebar">
      <div className="sidebar-header">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</div>
      <ul style={{ listStyle: "none", paddingLeft: 0, margin: 0 }}>
        {data.map((n) => (
          <TreeItem key={n.id} node={n} />
        ))}
      </ul>
    </nav>
  );
}
